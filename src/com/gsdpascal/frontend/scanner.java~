/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>pascal_lex.l</tt>
 */
package com.gsdpascal.frontend;
class scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\5\1\6\1\6\1\5\22\0\1\7\6\0\1\4\1\45"+
    "\1\46\1\51\1\47\1\42\1\50\1\3\1\52\12\1\1\43\1\41"+
    "\1\53\1\44\1\54\2\0\32\2\1\37\1\0\1\40\1\0\1\2"+
    "\1\0\1\14\1\27\1\16\1\24\1\23\1\32\1\13\1\31\1\26"+
    "\2\2\1\30\1\15\1\17\1\12\1\10\1\36\1\11\1\20\1\21"+
    "\1\33\1\25\1\35\1\34\1\22\1\2\12\0\1\6\u1fa2\0\1\6"+
    "\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\0\1\4\22\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\0\1\23\1\0"+
    "\1\24\1\0\2\2\1\25\1\2\1\26\15\2\1\27"+
    "\4\2\1\30\2\2\1\31\10\2\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\24\5\2\1\40\1\41\2\2"+
    "\1\42\1\43\1\44\3\2\1\45\1\2\1\46\1\2"+
    "\1\47\3\2\1\50\2\2\1\51\3\2\1\52\7\2"+
    "\1\53\1\2\1\54\1\55\1\2\1\56\3\2\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\15\2"+
    "\1\67\1\2\1\70\3\2\1\71\1\72\1\2\1\73"+
    "\1\74\1\75\2\2\1\76\1\77\1\100\1\101\4\2"+
    "\1\102\1\2\1\103\1\104\1\2\1\105\1\2\1\106"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0465\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0492\0\u04bf\0\u04ec\0\u0438"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\132"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\132\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\132\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u04ec\0\u0438\0\u0438\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\132\0\132\0\u0c21\0\u0c4e\0\132\0\132"+
    "\0\132\0\u0c7b\0\u0ca8\0\u0cd5\0\132\0\u0d02\0\132\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\132\0\u0e10\0\u0e3d\0\132"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\132\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\132\0\u102c\0\132\0\132\0\u1059"+
    "\0\132\0\u1086\0\u10b3\0\u10e0\0\132\0\132\0\132\0\132"+
    "\0\132\0\132\0\132\0\132\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\132\0\u1356\0\132\0\u1383\0\u13b0\0\u13dd\0\132"+
    "\0\132\0\u140a\0\132\0\u1437\0\132\0\u1464\0\u1491\0\132"+
    "\0\132\0\132\0\132\0\u14be\0\u14eb\0\u1518\0\u1545\0\132"+
    "\0\u1572\0\132\0\132\0\u159f\0\132\0\u15cc\0\132\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\3\1\21\1\22\1\23\1\24\1\25"+
    "\2\3\1\26\1\27\1\3\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\0\1\2\1\0\1\47"+
    "\52\0\2\3\5\0\27\3\21\0\1\50\51\0\4\51"+
    "\1\52\2\53\46\51\5\0\1\6\1\0\1\6\46\0"+
    "\2\3\5\0\1\3\1\54\25\3\17\0\2\3\5\0"+
    "\13\3\1\55\13\3\17\0\2\3\5\0\1\3\1\56"+
    "\12\3\1\57\5\3\1\60\4\3\17\0\2\3\5\0"+
    "\2\3\1\61\24\3\17\0\2\3\5\0\1\3\1\62"+
    "\5\3\1\63\7\3\1\64\7\3\17\0\2\3\5\0"+
    "\2\3\1\65\1\3\1\66\22\3\17\0\2\3\5\0"+
    "\2\3\1\67\1\3\1\70\14\3\1\71\5\3\17\0"+
    "\2\3\5\0\2\3\1\72\24\3\17\0\2\3\5\0"+
    "\23\3\1\73\2\3\1\74\17\0\2\3\5\0\1\3"+
    "\1\75\1\76\7\3\1\77\6\3\1\100\5\3\17\0"+
    "\2\3\5\0\7\3\1\101\10\3\1\102\6\3\17\0"+
    "\2\3\5\0\2\3\1\103\24\3\17\0\2\3\5\0"+
    "\4\3\1\104\22\3\17\0\2\3\5\0\7\3\1\105"+
    "\12\3\1\106\4\3\17\0\2\3\5\0\2\3\1\107"+
    "\10\3\1\110\13\3\17\0\2\3\5\0\2\3\1\111"+
    "\1\3\1\112\16\3\1\113\3\3\17\0\2\3\5\0"+
    "\7\3\1\114\17\3\17\0\2\3\5\0\1\3\1\115"+
    "\17\3\1\116\5\3\137\0\1\117\54\0\1\120\7\0"+
    "\1\121\44\0\1\122\11\0\1\123\53\0\4\53\1\124"+
    "\50\53\4\0\1\124\50\0\4\53\1\125\50\53\1\0"+
    "\2\3\5\0\2\3\1\126\10\3\1\127\13\3\17\0"+
    "\2\3\5\0\1\130\3\3\1\131\1\3\1\132\20\3"+
    "\17\0\2\3\5\0\14\3\1\133\12\3\17\0\2\3"+
    "\5\0\14\3\1\134\12\3\17\0\2\3\5\0\11\3"+
    "\1\135\15\3\17\0\2\3\5\0\1\3\1\136\25\3"+
    "\17\0\2\3\5\0\14\3\1\137\12\3\17\0\2\3"+
    "\5\0\10\3\1\140\16\3\17\0\2\3\5\0\14\3"+
    "\1\141\12\3\17\0\2\3\5\0\24\3\1\142\2\3"+
    "\17\0\2\3\5\0\7\3\1\143\17\3\17\0\2\3"+
    "\5\0\10\3\1\144\16\3\17\0\2\3\5\0\1\3"+
    "\1\145\2\3\1\146\22\3\17\0\2\3\5\0\11\3"+
    "\1\147\15\3\17\0\2\3\5\0\6\3\1\150\20\3"+
    "\17\0\2\3\5\0\1\3\1\151\25\3\17\0\2\3"+
    "\5\0\23\3\1\152\3\3\17\0\2\3\5\0\1\153"+
    "\26\3\17\0\2\3\5\0\13\3\1\154\13\3\17\0"+
    "\2\3\5\0\14\3\1\155\12\3\17\0\2\3\5\0"+
    "\10\3\1\156\16\3\17\0\2\3\5\0\25\3\1\157"+
    "\1\3\17\0\2\3\5\0\1\3\1\160\25\3\17\0"+
    "\2\3\5\0\11\3\1\161\15\3\17\0\2\3\5\0"+
    "\2\3\1\162\24\3\17\0\2\3\5\0\3\3\1\163"+
    "\23\3\17\0\2\3\5\0\1\3\1\164\25\3\17\0"+
    "\2\3\5\0\20\3\1\165\6\3\17\0\2\3\5\0"+
    "\7\3\1\166\17\3\17\0\2\3\5\0\11\3\1\167"+
    "\15\3\17\0\2\3\5\0\16\3\1\170\10\3\17\0"+
    "\2\3\5\0\16\3\1\171\10\3\17\0\2\3\5\0"+
    "\3\3\1\172\2\3\1\173\20\3\17\0\2\3\5\0"+
    "\14\3\1\174\12\3\17\0\2\3\5\0\13\3\1\175"+
    "\13\3\17\0\2\3\5\0\14\3\1\176\3\3\1\177"+
    "\6\3\17\0\2\3\5\0\2\3\1\200\24\3\17\0"+
    "\2\3\5\0\2\3\1\201\24\3\17\0\2\3\5\0"+
    "\4\3\1\202\22\3\17\0\2\3\5\0\16\3\1\203"+
    "\10\3\17\0\2\3\5\0\10\3\1\204\16\3\17\0"+
    "\2\3\5\0\13\3\1\205\13\3\17\0\2\3\5\0"+
    "\1\3\1\206\25\3\17\0\2\3\5\0\6\3\1\207"+
    "\20\3\17\0\2\3\5\0\11\3\1\210\15\3\17\0"+
    "\2\3\5\0\13\3\1\211\13\3\17\0\2\3\5\0"+
    "\13\3\1\212\13\3\17\0\2\3\5\0\7\3\1\213"+
    "\17\3\17\0\2\3\5\0\13\3\1\214\13\3\17\0"+
    "\2\3\5\0\7\3\1\215\17\3\17\0\2\3\5\0"+
    "\13\3\1\216\13\3\17\0\2\3\5\0\20\3\1\217"+
    "\6\3\17\0\2\3\5\0\16\3\1\220\10\3\17\0"+
    "\2\3\5\0\10\3\1\221\16\3\17\0\2\3\5\0"+
    "\6\3\1\222\20\3\17\0\2\3\5\0\16\3\1\223"+
    "\10\3\17\0\2\3\5\0\11\3\1\224\15\3\17\0"+
    "\2\3\5\0\20\3\1\225\6\3\17\0\2\3\5\0"+
    "\1\3\1\226\25\3\17\0\2\3\5\0\13\3\1\227"+
    "\13\3\17\0\2\3\5\0\4\3\1\230\22\3\17\0"+
    "\2\3\5\0\1\3\1\231\25\3\17\0\2\3\5\0"+
    "\12\3\1\232\14\3\17\0\2\3\5\0\7\3\1\233"+
    "\17\3\17\0\2\3\5\0\11\3\1\234\15\3\17\0"+
    "\2\3\5\0\11\3\1\235\15\3\17\0\2\3\5\0"+
    "\3\3\1\236\23\3\17\0\2\3\5\0\13\3\1\237"+
    "\13\3\17\0\2\3\5\0\7\3\1\240\17\3\17\0"+
    "\2\3\5\0\13\3\1\241\13\3\17\0\2\3\5\0"+
    "\11\3\1\242\15\3\17\0\2\3\5\0\20\3\1\243"+
    "\6\3\17\0\2\3\5\0\13\3\1\244\13\3\17\0"+
    "\2\3\5\0\13\3\1\245\13\3\17\0\2\3\5\0"+
    "\4\3\1\246\22\3\17\0\2\3\5\0\14\3\1\247"+
    "\12\3\17\0\2\3\5\0\11\3\1\250\15\3\17\0"+
    "\2\3\5\0\14\3\1\251\12\3\17\0\2\3\5\0"+
    "\11\3\1\252\15\3\17\0\2\3\5\0\2\3\1\253"+
    "\24\3\17\0\2\3\5\0\13\3\1\254\13\3\17\0"+
    "\2\3\5\0\4\3\1\255\22\3\17\0\2\3\5\0"+
    "\16\3\1\256\10\3\17\0\2\3\5\0\20\3\1\257"+
    "\6\3\17\0\2\3\5\0\5\3\1\260\21\3\17\0"+
    "\2\3\5\0\23\3\1\261\3\3\17\0\2\3\5\0"+
    "\1\3\1\262\25\3\17\0\2\3\5\0\7\3\1\263"+
    "\17\3\17\0\2\3\5\0\2\3\1\264\24\3\17\0"+
    "\2\3\5\0\7\3\1\265\17\3\17\0\2\3\5\0"+
    "\1\3\1\266\25\3\17\0\2\3\5\0\7\3\1\267"+
    "\17\3\17\0\2\3\5\0\13\3\1\270\13\3\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\0\23\1\4\11\1\1\7\11\2\1"+
    "\1\0\1\11\1\0\1\1\1\0\43\1\4\11\1\1"+
    "\2\11\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Parser yyparser;
    public scanner (java.io.Reader r, Parser yyparser) {
      this(r);
      this.yyparser = yyparser;
    }
    public int getLineNumber() {
        return yyline;  
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yyparser.yylval = new ParserVal(Integer.parseInt(yytext())); return Parser.T_INT;
            }
          case 72: break;
          case 2: 
            { yyparser.yylval = new ParserVal(yytext()); return Parser.T_ID;
            }
          case 73: break;
          case 3: 
            { return Parser.T_DOT;
            }
          case 74: break;
          case 4: 
            { yyline++;
            }
          case 75: break;
          case 5: 
            { return Parser.T_LB;
            }
          case 76: break;
          case 6: 
            { return Parser.T_RB;
            }
          case 77: break;
          case 7: 
            { return Parser.T_SEMI;
            }
          case 78: break;
          case 8: 
            { return Parser.T_COMMA;
            }
          case 79: break;
          case 9: 
            { return Parser.T_COLON;
            }
          case 80: break;
          case 10: 
            { return Parser.T_EQUAL;
            }
          case 81: break;
          case 11: 
            { return Parser.T_LP;
            }
          case 82: break;
          case 12: 
            { return Parser.T_RP;
            }
          case 83: break;
          case 13: 
            { return Parser.T_PLUS;
            }
          case 84: break;
          case 14: 
            { return Parser.T_MINUS;
            }
          case 85: break;
          case 15: 
            { return Parser.T_MUL;
            }
          case 86: break;
          case 16: 
            { return Parser.T_DIV;
            }
          case 87: break;
          case 17: 
            { return Parser.T_LT;
            }
          case 88: break;
          case 18: 
            { return Parser.T_GT;
            }
          case 89: break;
          case 19: 
            { return Parser.T_DOTDOT;
            }
          case 90: break;
          case 20: 
            { yyparser.yylval = new ParserVal(yytext()); return Parser.T_STRING;
            }
          case 91: break;
          case 21: 
            { return Parser.T_OR;
            }
          case 92: break;
          case 22: 
            { return Parser.T_OF;
            }
          case 93: break;
          case 23: 
            { return Parser.T_TO;
            }
          case 94: break;
          case 24: 
            { return Parser.T_DO;
            }
          case 95: break;
          case 25: 
            { return Parser.T_IF;
            }
          case 96: break;
          case 26: 
            { return Parser.T_ASSIGN;
            }
          case 97: break;
          case 27: 
            { return Parser.T_LE;
            }
          case 98: break;
          case 28: 
            { return Parser.T_UNEQUAL;
            }
          case 99: break;
          case 29: 
            { return Parser.T_GE;
            }
          case 100: break;
          case 30: 
            { yyparser.yylval = new ParserVal(Double.parseDouble(yytext())); return Parser.T_REAL;
            }
          case 101: break;
          case 31: 
            { yyparser.yylval = new ParserVal(yytext()); return Parser.T_CHAR;
            }
          case 102: break;
          case 32: 
            { return Parser.T_ORD;
            }
          case 103: break;
          case 33: 
            { return Parser.T_ODD;
            }
          case 104: break;
          case 34: 
            { return Parser.T_AND;
            }
          case 105: break;
          case 35: 
            { return Parser.T_ABS;
            }
          case 106: break;
          case 36: 
            { return Parser.T_MOD;
            }
          case 107: break;
          case 37: 
            { return Parser.T_CHR;
            }
          case 108: break;
          case 38: 
            { return Parser.T_NOT;
            }
          case 109: break;
          case 39: 
            { return Parser.T_SQR;
            }
          case 110: break;
          case 40: 
            { return Parser.T_END;
            }
          case 111: break;
          case 41: 
            { return Parser.T_VAR;
            }
          case 112: break;
          case 42: 
            { return Parser.T_FOR;
            }
          case 113: break;
          case 43: 
            { return Parser.T_PRED;
            }
          case 114: break;
          case 44: 
            { return Parser.T_READ;
            }
          case 115: break;
          case 45: 
            { return Parser.T_REAL_TYPE;
            }
          case 116: break;
          case 46: 
            { return Parser.T_GOTO;
            }
          case 117: break;
          case 47: 
            { return Parser.T_CASE;
            }
          case 118: break;
          case 48: 
            { return Parser.T_CHAR_TYPE;
            }
          case 119: break;
          case 49: 
            { return Parser.T_SUCC;
            }
          case 120: break;
          case 50: 
            { return Parser.T_SQRT;
            }
          case 121: break;
          case 51: 
            { return Parser.T_TRUE;
            }
          case 122: break;
          case 52: 
            { return Parser.T_TYPE;
            }
          case 123: break;
          case 53: 
            { return Parser.T_THEN;
            }
          case 124: break;
          case 54: 
            { return Parser.T_ELSE;
            }
          case 125: break;
          case 55: 
            { return Parser.T_ARRAY;
            }
          case 126: break;
          case 56: 
            { return Parser.T_CONST;
            }
          case 127: break;
          case 57: 
            { return Parser.T_BEGIN;
            }
          case 128: break;
          case 58: 
            { return Parser.T_FALSE;
            }
          case 129: break;
          case 59: 
            { return Parser.T_UNTIL;
            }
          case 130: break;
          case 60: 
            { return Parser.T_WRITE;
            }
          case 131: break;
          case 61: 
            { return Parser.T_WHILE;
            }
          case 132: break;
          case 62: 
            { return Parser.T_REPEAT;
            }
          case 133: break;
          case 63: 
            { return Parser.T_RECORD;
            }
          case 134: break;
          case 64: 
            { return Parser.T_MAXINT;
            }
          case 135: break;
          case 65: 
            { return Parser.T_DOWNTO;
            }
          case 136: break;
          case 66: 
            { return Parser.T_PROGRAM;
            }
          case 137: break;
          case 67: 
            { return Parser.T_INTEGER_TYPE;
            }
          case 138: break;
          case 68: 
            { return Parser.T_BOOLEAN_TYPE;
            }
          case 139: break;
          case 69: 
            { return Parser.T_WRITELN;
            }
          case 140: break;
          case 70: 
            { return Parser.T_FUNCTION;
            }
          case 141: break;
          case 71: 
            { return Parser.T_PROCEDURE;
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
